// Initialize global variables
let gameSeq = []; // Stores the sequence of colors generated by the game
let userseq = []; // Stores the sequence of colors input by the user
let start = false; // Keeps track of whether the game has started
let level = 0; // Tracks the current level of the game
let highscore = 0; // Tracks the highest level achieved during the session
let colors = ['red', "purple", "green", "silver"]; // Array of color options
const container = document.querySelector('.container'); // Select the contain

// Retrieve the highscore from localStorage (if it exists) when the game starts
highscore = localStorage.getItem('highscore') || 0;

const h3 = document.querySelector('h3'); // Select the h3 element for displaying messages

// Start the game on keypress
document.addEventListener('keypress', () => {
    if (start == false) {
        start = true; // Mark the game as started
        levelUp(); // Move to the next level
    }
});

// Handles the game's flash animation for the buttons
const gameFlash = (btn) => {
    btn.classList.add('flash'); // Add the flash effect
    setTimeout(() => {
        btn.classList.remove('flash'); // Remove the effect after 300ms
    }, 300);
}

// Handles the user's flash animation for the buttons
const userFlash = (btn) => {
    btn.classList.add('userflash'); // Add the userflash effect
    setTimeout(() => {
        btn.classList.remove('userflash'); // Remove the effect after 250ms
    }, 250);
}

// Moves the game to the next level
function levelUp() {
    userseq = []; // Reset the user sequence for the new level
    level++; // Increase the level
    h3.innerText = `Level ${level}`; // Display the current level
    let rndIndex = Math.floor(Math.random() * 4); // Select a random index
    let rndcolor = colors[rndIndex]; // Get the corresponding color
    const rndBtn = document.querySelector(`.${rndcolor}`); // Select the button for the color
    gameSeq.push(rndcolor); // Add the color to the game sequence
    console.log(gameSeq); // Log the sequence for debugging
    gameFlash(rndBtn); // Flash the button
}

// Checks the user's input against the game's sequence
const checkAns = function(idx) {
   const container = document.querySelector('.container'); // Select the contain
    if (userseq[idx] == gameSeq[idx]) {
        // If the user's input matches the game's sequence so far
        if (userseq.length == gameSeq.length) {
            // If the user has completed the sequence
            setTimeout(levelUp, 1000); // Move to the next level after a short delay
        }
    } else {
        // If the user's input is incorrect
        // Check and update the high score
        if (level > highscore) {
            highscore = level; // Update the high score
            localStorage.setItem('highscore', highscore); // Save the high score in localStorage
        }
        // Display the Game Over message and the high score
        h3.innerHTML = `Game Over! Your score is <b>${level}</b> <br> Highscore: <b>${highscore}</b> <br> Press any key to restart`;
        // Add a fail class to all buttons for visual effect
        document.querySelectorAll('.switch').forEach(btn => {
            btn.classList.add('fail');
        });
     
          // Add the rotating animation to the container
          container.classList.add('rotate');
          console.log(container.classList); // Check if the 'rotate' class is added
           
        reset(); // Reset the game
    }
}

// Handles the user's button press
function buttonPress() {
    let btn = this; // Get the button that was clicked
    userFlash(btn); // Trigger the user flash animation

    let userColor = btn.getAttribute('id'); // Get the ID (color) of the button
    userseq.push(userColor); // Add the color to the user's sequence
    console.log(userseq); // Log the sequence for debugging

    checkAns(userseq.length - 1); // Check the user's input against the game's sequence
}

// Add event listeners to all color buttons
let allBtn = document.querySelectorAll('.switch');
for (let btn of allBtn) {
    btn.addEventListener('click', buttonPress); // Attach the click event to each button
}

// Resets the game to its initial state
function reset() {
    const container = document.querySelector('.container'); // Select the contain
    userseq = []; // Clear the user's sequence
    gameSeq = []; // Clear the game's sequence
    level = 0; // Reset the level
    start = false; // Mark the game as not started
    document.addEventListener('keypress', () => {
        container.classList.remove('rotate'); // Add this line
        setTimeout(() => {
            document.querySelectorAll('.switch').forEach(btn => {
                btn.classList.remove('fail');
            });
        }, 100);
    });
}